talk about TVM

Implement TVH : why not multiply by number of hours ?

How do I get contour plot of pems data to compare (and for congestion pattern)
/are flw and occ smoothened ? Oo
/ 288 in pems5data => pb if duration different than one day ?
/ use real scenario instead of "matching beats" scenario now 


Pb with several sensors in one link in pems "unique..."=> errors in TVM and others maybe => I checked, two sensors on a same link have different values ex : columns 3-45, 64-66, 63-67.

TVM/TVH too global to tune 11 knobs precisely : take into account local variations ? 

why don't I compare with the actual congestion instead of a square ? I define a rectangle, and then compare pems congestion with beats congestion in it.
criteria for density treshold+epsilon
equilibrium popsize/time

 %CHECK THAT MONITORED TEMPLATES ARE THE EXACT SAME AS PEMS DATA.
    %I AM USING BEATS OUTPUT WITH KNOBS SET TO ONE INSTEAD OF TEMPLATES FOR
    %REFINING THE KNOB BOUNDARIES (IN THEORY, THEIR SUM SHOULD BE THE
    %SAME).
    %IS THERE A WAY TO RUN BEATS PERSISTENT WHITHOUT RESETING ? ITS SO
    %FAST.
    
    fix the zeros not smoothened in PeMS data
	
	change obj.algorithm_box.....OUTPUT_DT in performance calculators
	runnin beats in function reset_beats_simulation    
	functions at the end of algorithmbox


cmaes modified :

stoponstagnation
stoponequalfunvalues
1433-1451 (funval)
										

0770 0260 	

16 knobs [-873337960;-128787016;24031575;24031587;135273082;734819143;-792397270;-792345191;-781754904;-126537863;-126499580;-24558231;-24031553;-24029866;-24026218;126499392]

7 knobs [-781754904;-126537863;-126499580;-24558231;-24029866;-24026218;126499392]

9 knobs (tuesdays average) [128793003;-781754904;-781749995;-126537863;-126499580;-24558231;-24029866;-24026218;126499392]

12 knobs (deleted sensors) [24162804;128793003;-781754904;-781749995;-126537863;-126499580;-24558231;-24031553;-24029866;-24026218;126499392;756090723]

knobs current value example for TVM differing

            [3.09623195746547;0.665326904900061;2.67877410313908;0.546533655903095;0.0910897697007438;0.00529454621426718;0.0969667147545639;1.33317470927936;...
            0.0657908254005954;0.0193266867314174;0.120039204287368;2.88850365700588]







        function [] = plot_history(obj,figureNumber,frameNumber)
            n=nargin;
            if n>1
                figure(figureNumber);
            else
                figure;
            end
            if n>2
                error_in_percentage_history=obj.error_in_percentage_history(1:frameNumber,1);
            else
                error_in_percentage_history=obj.error_in_percentage_history;
            end
            plot(error_in_percentage_history);
            title('CongestionPattern matching error evolution');
            ylabel('Error in percentage');
            xlabel('Number of BeATS evaluations');                
        end    





obj.result_for_xls{1}=obj.error_function.name;
            obj.result_for_xls{2}=Utilities.cellArray2char(obj.settings.error_function.norms);
            obj.result_for_xls{3}=size(obj.starting_point,2);
            obj.result_for_xls{4}=obj.initialization_method;
            obj.result_for_xls{5}=Utilities.double2char(obj.normopts.CENTERS);
            obj.result_for_xls{6}=Utilities.double2char(obj.normopts.SIGMAS);
            obj.result_for_xls{7}=Utilities.double2char(obj.starting_point);
            obj.result_for_xls{8}=obj.insigma;
            obj.result_for_xls{9}=obj.pems.mainline_uncertainty;
            obj.result_for_xls{10}=obj.error_function.pcs_uncertainty;
            obj.result_for_xls{11}=obj.knobs.underevaluation_tolerance_coefficient;
            obj.result_for_xls{12}=obj.knobs.overevaluation_tolerance_coefficient;
            obj.result_for_xls{13}=Utilities.double2char(obj.knobs.boundaries_min);
            obj.result_for_xls{14}=Utilities.double2char(obj.knobs.boundaries_max);
            obj.result_for_xls{15}=obj.maxIter;
            obj.result_for_xls{16}=obj.maxEval;
            obj.result_for_xls{17}=obj.stopFValue;
            obj.result_for_xls{18}=Utilities.double2char(obj.bestEverPoint);
            obj.result_for_xls{19}=obj.bestEverErrorFunctionValue;
            obj.result_for_xls{20}=Utilities.cellArray2char(obj.stopFlag);
            obj.result_for_xls{21}=obj.numberOfIterations;
            obj.result_for_xls{22}=obj.numberOfEvaluations;
            obj.result_for_xls{23}=obj.convergence;